generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/*
  ENUMS
*/
enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

enum AuditStatus {
  IN_PROGRESS
  COMPLETED
  CANCELED
}

/*
  USERS
*/
model User {
  id             String         @id @default(uuid())
  name           String
  mobile         String         @unique
  password       String
  role           Role           @default(USER)
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt

  // Many-to-many relation with audits
  audits         Audit[]        @relation("AuditParticipants")

  // Audit history actions
  auditHistories AuditHistory[]
}

/*
  ROOMS & ITEMS
*/
model Room {
  id             String         @id @default(uuid())
  name           String
  floor          String?
  department     String?
  itemDetails    ItemDetails[]
  auditHistories AuditHistory[]
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt

  @@index([name])
}

model Item {
  id             String         @id @default(uuid())
  name           String
  category       String?
  unit           String?
  itemDetails    ItemDetails[]
  auditHistories AuditHistory[]
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt

  @@index([name])
  @@index([category])
}

/*
  AUDITS
*/
model Audit {
  id            String         @id @default(uuid())
  month         Int
  year          Int
  status        AuditStatus    @default(IN_PROGRESS)
  notes         String?
  itemDetails   ItemDetails[]

  // Participants: many-to-many with User
  participants  User[]         @relation("AuditParticipants")

  // Audit history entries
  history       AuditHistory[]

  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt

  @@unique([month, year])
}

/*
  ITEM DETAILS (junction table)
*/
model ItemDetails {
  id                String     @id @default(uuid())
  room_id           String
  item_id           String
  audit_id          String
  active_quantity   Int        @default(0)
  broken_quantity   Int        @default(0)
  inactive_quantity Int        @default(0)

  room    Room     @relation(fields: [room_id], references: [id], onDelete: Cascade)
  item    Item     @relation(fields: [item_id], references: [id], onDelete: Cascade)
  audit   Audit    @relation(fields: [audit_id], references: [id], onDelete: Cascade)

  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt

  @@unique([room_id, item_id, audit_id])
  @@index([room_id])
  @@index([item_id])
  @@index([audit_id])
}

/*
  AUDIT HISTORY
*/
model AuditHistory {
  id            String     @id @default(uuid())
  audit_id      String
  item_id       String?
  room_id       String?
  user_id       String
  change_type   String
  old_value     String?
  new_value     String?
  description   String?
  created_at    DateTime   @default(now())

  audit   Audit   @relation(fields: [audit_id], references: [id], onDelete: Cascade)
  item    Item?   @relation(fields: [item_id], references: [id])
  room    Room?   @relation(fields: [room_id], references: [id])
  user    User    @relation(fields: [user_id], references: [id])
}
